from pickle import NONE
from externalizer.models import Environment, EnvironmentProperty, EnvServiceProperty, ServiceProperty, Property, EnvServer, UserDetails
from logsearch.models import SysConfig
from logsearch.models import ServerService, Service, Server, ServerUser
from externalizer import propertyParser
from django.contrib.auth.models import User
    

autoGeneratedDescription = 'THIS SERVICE IS AUTOGENERATED. PLEASE UPDATE THE SERVICEPATH AND DESCRIPTION WITH CORRECT DATA.'

#==========================================================  USERS  ===========================================================

def getUserRepositoryCredentials(username):
    user = User.objects.get(username=username)
    userdetails = UserDetails.objects.get(user=user)
    return userdetails.repositoryURL, userdetails.repositoryPrivateToken


#=======================================================  ENVIRONMENTS  =======================================================

def getAllEnvironments(excludeTests=True):
    if excludeTests :
        return Environment.objects.exclude(envName__istartswith='test')
    else :
        return Environment.objects.all()


#======================================================  SERVERS  ============================================================

def getEnvServers(envName='', excludeTests=True):
    environments = None
    if envName:
        environments = Environment.objects.filter(envName__istartswith=envName)
    elif excludeTests:
        environments = getAllEnvironments(excludeTests)
        
    if environments:
        return EnvServer.objects.filter(environment__in=environments)
    return EnvServer.objects.all()
        

def getServersByEnvironment(envName, namesOnly=False, serverNameListFilter=None):
    env = Environment.objects.get(envName=envName)
    
    envServers = EnvServer.objects.filter(environment=env)
    servers = list()
    for i in envServers:
        try:
            if not serverNameListFilter or serverNameListFilter.index(i.server.serverName) > -1:
                if namesOnly:
                    servers.append(i.server.serverName)
                else:
                    servers.append((i.server.serverName, i.server.serverIP))
        except ValueError:
            print('Exclude ' + i.server.serverName + '!')
        
    return servers


def saveUpdateServerServices(serverName, serviceName, servicePath, jarFile, saveServerService=True):
    server = None
    if saveServerService:
        server = Server.objects.get(serverName=serverName)
        
    try:
        service = Service.objects.get(serviceName=serviceName)
        if saveServerService:
            serverService = ServerService.objects.get(server=server, service=service)
            serverService.servicePath = servicePath
            serverService.jarFile = jarFile
            serverService.save()
            return serverService
        else:
            return service
    except Service.DoesNotExist:
        service = Service.objects.create(serviceName=serviceName, description=autoGeneratedDescription)
        if saveServerService:
            return ServerService.objects.create(server=server, service=service, servicePath=servicePath, jarFile=jarFile)
        else:
            return service
    except ServerService.DoesNotExist:
        return ServerService.objects.create(server=server, service=service, servicePath=servicePath, jarFile=jarFile)
    

def getServerCredentials(username, serverIP):
    dbusername = ''
    password = ''
    
    server = None
    if serverIP :
        server = Server.objects.get(serverIP=serverIP)
    
    user = None
    if username:
        user = User.objects.get(username=username)
        
    if server :
        if user :
            serverUser = ServerUser.objects.get(server=server, user=user)
            dbusername = serverUser.loginUser
            password = decryptText(serverUser.loginPassword)
        else:
            dbusername = server.defaultUser
            password = decryptText(server.defaultPassword)
    
    return dbusername, password


def encryptText(text):
    return text


def decryptText(text):
    return text


#=====================================================  SERVICES  ============================================================

def getAllServices(excludeTests=True, serviceNamesOnly=False):
    if excludeTests :
        if serviceNamesOnly:
            servicesList = Service.objects.exclude(serviceName__istartswith='test-')
            servicenames = list()
            for i in servicesList:
                servicenames.append(i.serviceName)
                
            return servicenames
        else:
            return Service.objects.exclude(serviceName__istartswith='test-')
    else :
        if serviceNamesOnly:
            servicesList = Service.objects.all()
            servicenames = list()
            for i in servicesList:
                servicenames.append(i.serviceName)
                
            return servicenames
        else:
            return Service.objects.all()


#====================================================  PROPERTIES  ==========================================================
def getEnvironmentServiceProperties(envName, serviceName):
    env = Environment.objects.get(envName=envName)
    service = Service.objects.get(serviceName=serviceName)
    serviceProperties = ServiceProperty.objects.filter(service=service)
    return EnvServiceProperty.objects.filter(environment=env, serviceProperty__in=serviceProperties)


def getPropertiesByPropertyKeyword(keyword, envName, serviceName=None, getFromEnvServicePropertyOnly=False):
    propertyList = getPropertiesContainingKeyword(keyword)
    
    env = None
    service = None
    if envName:
        env = Environment.objects.get(envName=envName)
            
    if serviceName:
        service = Service.objects.get(serviceName=serviceName)
    
    serviceProperties = None
    if service:
        serviceProperties = ServiceProperty.objects.filter(service=service, prop__in=propertyList)
    else:
        serviceProperties = ServiceProperty.objects.filter(prop__in=propertyList)
        
    if env and service:
        return EnvServiceProperty.objects.filter(serviceProperty__in=serviceProperties, environment=env)
    elif env:
        if getFromEnvServicePropertyOnly:
            if serviceProperties:
                return EnvServiceProperty.objects.filter(environment=env, serviceProperty__in=serviceProperties)
            else:
                return EnvServiceProperty.objects.filter(environment=env)
        else:
            return EnvironmentProperty.objects.filter(environment=env, prop__in=propertyList)
    elif serviceProperties:
        if getFromEnvServicePropertyOnly:
            return EnvServiceProperty.objects.filter(serviceProperty__in=serviceProperties)
        else:
            return serviceProperties
        
    return None
    

def getPropertiesContainingKeyword(keyword, propertyNameOnly=True):
    if propertyNameOnly:
        return Property.objects.filter(propertyName__contains=keyword)
    else:
        return Property.objects.filter(propertyName__contains=keyword).values()


def getEnvServicePropertiesByPropertyNameList(propertyNameList, serviceName='', envName=''):
    propList = Property.objects.filter(propertyName__in=propertyNameList)
    
    env = None
    if envName:
        env = Environment.objects.get(envName=envName)
        
    service = None
    if serviceName:
        service = Service.objects.get(serviceName=serviceName)

    serviceProperties = None
    if service:
        serviceProperties = ServiceProperty.objects.filter(prop__in=propList, service=service)
    else:
        serviceProperties = ServiceProperty.objects.filter(prop__in=propList)
    
    if env:
        return EnvServiceProperty.objects.filter(serviceProperty__in=serviceProperties, environment=env)
    else:
        return EnvServiceProperty.objects.filter(serviceProperty__in=serviceProperties)
        

def isServiceSpecificProperty(prop):
    try:
        return Property.objects.get(propertyName=prop).serviceSpecific
    except ValueError:
        return False
    

def isEnvironmentSpecificProperty(prop):
    try:
        return Property.objects.get(propertyName=prop).environmentSpecific
    except ValueError:
        return False


def getProperty(envName, serviceName, propName):
    if not propName:
        raise ValueError('Property must not be null')
    
    if not envName and not serviceName:
        raise ValueError('Environment and Service must not be null at the same time')

    prop = Property.objects.get(propertyName=propName)
    
    service = None
    if serviceName:
        service = Service.objects.get(serviceName=serviceName)
    
    environment = None
    if envName:
        environment = Environment.objects.get(envName=envName)

    serviceProp = None
    if service:
        serviceProp = ServiceProperty.objects.get(service=service, prop=prop)
        if isServiceSpecificProperty(propName):
            return serviceProp
        
    if environment:
        if not serviceProp or isEnvironmentSpecificProperty(propName):
            return EnvironmentProperty.objects.get(environment=environment, prop=prop)
        else:
            return EnvServiceProperty.objects.get(environment=environment, serviceProperty=serviceProp)
         
    if serviceProp:
        return serviceProp
    return None
        

def savePropertyFile(envName, serviceName, rawContent):
    textOutput = rawContent.splitlines()
    
    savedKeyValueList = []
    failedKeyValueList = []
    for row in textOutput:
        cleanRow = row.strip()
        if cleanRow and cleanRow != '' and cleanRow[0:1] != '#':
            propName, value = propertyParser.parseProperty(row)
            
            try:
                savePropertyValue(envName, serviceName, propName, value)
                savedKeyValueList.append((propName, value))
            except ValueError:
                failedKeyValueList.append((propName, value))
                
    return savedKeyValueList, failedKeyValueList


def savePropertyValue(envName, serviceName, propertyName, value, tag='', propertyEnabled=True):
    if not propertyName:
        raise ValueError('Property must not be null or empty!')
    if value == None:
        raise ValueError('Value must not be null!')
    if not envName and not serviceName:
        raise ValueError('Environment and Service must not be null/empty at the same time!')
    
    prop = None
    propModel = None
    serviceModel = None
    envModel = None
    servicePropModel = None
    while not prop:
        try:
            prop = getProperty(envName, serviceName, propertyName)
        except Property.DoesNotExist: # No property is found, then create new Property object
            propModel = Property.objects.create(propertyName=propertyName)
        except Service.DoesNotExist: # No Service is found, then create new Service object
            if serviceName:
                serviceModel = Service.objects.create(serviceName=serviceName, description='THIS SERVICE IS AUTOGENERATED. PLEASE UPDATE THE SERVICEPATH AND DESCRIPTION WITH CORRECT DATA.')
            else:
                raise ValueError('ServiceName is required to save this property!')
        except Environment.DoesNotExist: # No Environment is found, then create new Environment object
            if envName:
                envModel = Environment.objects.create(envName=envName)
            else:
                raise ValueError('EnvName is required to save this property!')
        except ServiceProperty.DoesNotExist: # No ServiceProperty is found, then create new ServiceProperty object
            if not serviceModel:
                serviceModel = Service.objects.get(serviceName=serviceName)
                
            if not propModel:
                propModel = Property.objects.get(propertyName=propertyName)
                
            if serviceModel and propModel:
                servicePropModel = ServiceProperty.objects.create(service=serviceModel, prop=propModel, propertyValue=value)
            else:
                raise ValueError('Failed to create Service or Property objects for ServiceProperty!')
        except EnvServiceProperty.DoesNotExist: # No EnvServiceProperty is found, then create new EnvServiceProperty object
            if not serviceModel:
                serviceModel = Service.objects.get(serviceName=serviceName)
                
            if not propModel:
                propModel = Property.objects.get(propertyName=propertyName)
                
            if not envModel:
                envModel = Environment.objects.get(envName=envName)
                
            if not servicePropModel:
                servicePropModel = ServiceProperty.objects.get(service=serviceModel, prop=propModel)
                
            if servicePropModel and envModel:
                return  EnvServiceProperty.objects.create(serviceProperty=servicePropModel, environment=envModel, propertyValue=value, propertyTag=tag, propertyEnabled=propertyEnabled)
            else:
                raise ValueError('Failed to create ServiceProperty or Environment objects for EnvServiceProperty!')
        except EnvironmentProperty.DoesNotExist: # No EnvironmentProperty is found, then create new EnvironmentProperty object
            if not envModel:
                envModel = Environment.objects.get(envName=envName)

            if not propModel:
                propModel = Property.objects.get(propertyName=propertyName)

            if envModel and propModel:
                return EnvironmentProperty.objects.create(environment=envModel, prop=propModel, propertyValue=value)
            else:
                raise ValueError('Failed to create Environment or Property objects for EnvironmentProperty!')
            
    prop.propertyValue = value
    prop.save()
    return prop
            

#====================================================  CONFIG  ==========================================================

def getConfigValue(configProperty):
    return SysConfig.objects.get(configProperty=configProperty).configValue